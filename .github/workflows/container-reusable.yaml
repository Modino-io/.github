name: CI docker container

on:
  workflow_call:
      inputs:
        CALLER_REPOSITORY:
          required: true
          type: string
        CALLER_REPOSITORY_VERSION:
          required: true
          type: string
        REGISTRY:
          required: true
          type: string
        DOCKERFILE:
          required: true
          type: string
        RUNS_ON:
          required: true
          type: string
      secrets:
        GIT_USERNAME:
          required: true
        GIT_TOKEN:
          required: true
        GITLAB_PACKAGES_TOKEN:
          required: true
        REGISTRY_LOGIN:
          required: true
        REGISTRY_PASSWORD:
          required: true
        GITLAB_TOKEN:
          required: true
        GITLAB_URL:
          required: true
        GITLAB_REPOSITORY:
          required: true

jobs:
  build-images:
    strategy:
      matrix:
          arch: [linux/amd64, linux/arm64]
    timeout-minutes: 60
    runs-on: ${{ inputs.RUNS_ON }}
    permissions:
      packages: write
    steps:
      - name: Checkout caller repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.CALLER_REPOSITORY }}
          ref: ${{ inputs.CALLER_REPOSITORY_VERSION }}
          token: ${{ secrets.GIT_TOKEN }}

      - name: Checkout Modino-io/modino-devops repository
        uses: actions/checkout@v3
        with:
          repository: Modino-io/modino-devops
          path: modino-devops
          token: ${{ secrets.GIT_TOKEN }}

      - name: Prepare Certs
        run: |
          ./modino-devops/docker-image-script/getCerts.sh
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_URL: ${{ secrets.GITLAB_URL }}
          GITLAB_REPOSITORY: ${{ secrets.GITLAB_REPOSITORY }}

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.REGISTRY }}/modino/modino/${{ inputs.CALLER_REPOSITORY }}
          tags: |
            type=sha,priority=900,prefix=build-${{ github.run_id }}-

      - name: Docker build and push
        id: docker_build
        run: |
          IMAGE_NAME=$(echo ${{ steps.meta.outputs.images }}:${{ steps.meta.outputs.tags }} | cut -c 2-)

          docker build \
          -t ${IMAGE_NAME}-${{ matrix.arch }} \
          -f ./Dockerfile_online . \
          --build-arg GITHUB_USERNAME=${{ secrets.GIT_USERNAME }} \
          --build-arg GITHUB_TOKEN=${{ secrets.GIT_TOKEN }} \
          --build-arg TARGETPLATFORM=${{ matrix.arch }} \
          --build-arg GITLAB_PACKAGES_TOKEN=${{ secrets.GITLAB_PACKAGES_TOKEN }}

          docker save -o ${IMAGE_NAME}-${{ matrix.arch }}.tar ${IMAGE_NAME}-${{ matrix.arch }}

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "::set-output name=IMAGE_NAME::${IMAGE_NAME}"


      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-${{ matrix.arch }}
          path: ./${{ steps.docker_build.outputs.IMAGE_NAME }}-${{ matrix.arch }}.tar

    outputs:
      IMAGE_NAME: ${{ steps.docker_build.outputs.IMAGE_NAME }}

  push:
    name: Push Docker images
    runs-on: ${{ inputs.RUNS_ON }}
    needs: build-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download arm image
        uses: actions/download-artifact@v2
        with:
          name: image-linux/amd64
          path: ./

      - name: Download amd image
        uses: actions/download-artifact@v2
        with:
          name: image-linux/arm64
          path: ./

      - name: Load and combine Docker images
        run: |
          export IMAGE_NAME="${{ needs.build-images.outputs.IMAGE_NAME }}
          docker load --input ./${IMAGE_NAME}-linux/amd64.tar
          docker load --input ./${IMAGE_NAME}-linux/arm64.tar

          docker push {IMAGE_NAME}-linux/amd64
          docker push {IMAGE_NAME}-linux/arm64

          docker manifest create \
          ${IMAGE_NAME} \
          --amend ${IMAGE_NAME}-linux/amd64 \
          --amend ${IMAGE_NAME}-linux/arm64

          docker manifest push ${IMAGE_NAME}
