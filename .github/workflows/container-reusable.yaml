name: CI docker container

on:
  workflow_call:
      inputs:
        CALLER_REPOSITORY:
          required: true
          type: string
        CALLER_REPOSITORY_VERSION:
          required: true
          type: string
        REGISTRY:
          required: true
          type: string
        DOCKERFILE:
          required: true
          type: string
        RUNS_ON:
          required: true
          type: string
      secrets:
        GIT_USERNAME:
          required: true
        GIT_TOKEN:
          required: true
        GITLAB_PACKAGES_TOKEN:
          required: true
        REGISTRY_LOGIN:
          required: true
        REGISTRY_PASSWORD:
          required: true
        GITLAB_TOKEN:
          required: true
        GITLAB_URL:
          required: true
        GITLAB_REPOSITORY:
          required: true
        VAULT_TOKEN_MODINO_SECRETS:
          required: false
        VAULT_URL:
          required: false

jobs:
  build-images:
    strategy:
      matrix:
          arch: [linux/amd64, linux/arm64]
    timeout-minutes: 60
    runs-on: ${{ inputs.RUNS_ON }}
    permissions:
      packages: write
    steps:
      - name: Checkout caller repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.CALLER_REPOSITORY }}
          ref: ${{ inputs.CALLER_REPOSITORY_VERSION }}
          token: ${{ secrets.GIT_TOKEN }}

      - name: Checkout Modino-io/modino-devops repository
        uses: actions/checkout@v3
        with:
          repository: Modino-io/modino-devops
          path: modino-devops
          token: ${{ secrets.GIT_TOKEN }}

      - name: Prepare Certs
        run: |
          ./modino-devops/docker-image-script/getCerts.sh
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_URL: ${{ secrets.GITLAB_URL }}
          GITLAB_REPOSITORY: ${{ secrets.GITLAB_REPOSITORY }}

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          logout: false

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.REGISTRY }}/modino/modino/${{ inputs.CALLER_REPOSITORY }}
          tags: |
            type=sha,priority=900,prefix=build-${{ github.run_id }}-

      - name: Check for Secret availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.VAULT_URL }}" != '' ]; then
            echo "get_secrets_from_vault=true" >> $GITHUB_OUTPUT;
          else
            echo "get_secrets_from_vault=false" >> $GITHUB_OUTPUT;
          fi

      - name: Import Secrets
        if: ${{ steps.secret-check.outputs.get_secrets_from_vault == 'true' }}
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.test.modino.cloud/
          method: github
          githubToken: ${{ secrets.GIT_TOKEN }}
          tlsSkipVerify: true
          secrets: |
              kv/data/modino-tokens RSA_PUB_PEM | RSA_PUB_PEM ;
              kv/data/modino-tokens PASSWD | PASSWD ;
              kv/data/modino-tokens KEY_ASC | KEY_ASC ;

      - name: Setup secret files
        if: ${{ steps.secret-check.outputs.get_secrets_from_vault == 'true' }}
        run: |
          echo '${{ steps.secrets.outputs.RSA_PUB_PEM }}' | base64 --decode > rsa_pub.pem
          echo '${{ steps.secrets.outputs.PASSWD }}' > passwd
          echo '${{ steps.secrets.outputs.KEY_ASC }}' | base64 --decode > key.asc

      - name: Docker build and push
        id: docker_build
        run: |
          export IMAGE_NAME=$(echo ${{ steps.meta.outputs.images }}:${{ steps.meta.outputs.tags }} | cut -c 2-)
          export ARCH=$(echo ${{ matrix.arch }} | cut -f2 -d"/" )

          docker build \
          -t ${ARCH}:tmp \
          -f ./Dockerfile_online . \
          --build-arg GITHUB_USERNAME=${{ secrets.GIT_USERNAME }} \
          --build-arg GITHUB_TOKEN=${{ secrets.GIT_TOKEN }} \
          --build-arg TARGETPLATFORM=${{ matrix.arch }} \
          --build-arg GITLAB_PACKAGES_TOKEN=${{ secrets.GITLAB_PACKAGES_TOKEN }}

          docker save -o ${ARCH}.tar ${ARCH}:tmp

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "ARCH=${ARCH}" >> $GITHUB_OUTPUT

          echo "::set-output name=IMAGE_NAME::${IMAGE_NAME}"


      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-${{ steps.docker_build.outputs.ARCH }}
          path: ./${{ steps.docker_build.outputs.ARCH }}.tar

    outputs:
      IMAGE_NAME: ${{ steps.docker_build.outputs.IMAGE_NAME }}

  push:
    name: Push Docker images
    runs-on: ${{ inputs.RUNS_ON }}
    needs: build-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          logout: false

      - name: Download arm image
        uses: actions/download-artifact@v2
        with:
          name: image-amd64
          path: ./

      - name: Download amd image
        uses: actions/download-artifact@v2
        with:
          name: image-arm64
          path: ./

      - name: Load and combine Docker images
        run: |
          export IMAGE_NAME=${{ needs.build-images.outputs.IMAGE_NAME }}
          docker load --input ./amd64.tar
          docker load --input ./arm64.tar

          docker tag amd64:tmp ${IMAGE_NAME}-amd64
          docker tag arm64:tmp ${IMAGE_NAME}-arm64

          docker images

          docker push ${IMAGE_NAME}-amd64
          docker push ${IMAGE_NAME}-arm64

          docker manifest create \
          ${IMAGE_NAME} \
          --amend ${IMAGE_NAME}-amd64 \
          --amend ${IMAGE_NAME}-arm64

          docker manifest push ${IMAGE_NAME}

      - name: Delete docker artifacts
        uses: geekyeggo/delete-artifact@v2
        if: always()
        with:
            name: |
              image-arm64
              image-amd64
